<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-17T03:09:36.368Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark基础环境配置</title>
    <link href="http://example.com/2022/05/17/Spark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/05/17/Spark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-17T03:05:00.051Z</published>
    <updated>2022-05-17T03:09:36.368Z</updated>
    
    <content type="html"><![CDATA[<p>本文主</p><p>本文主要使用Hexo与Github进行个人blog的搭建<br>Hexo官网：<a href="https://hexo.io/zh-cn/">Hexo</a><br>Github官网：<a href="https://github.com/">Github</a></p><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>本地环境为: Window10系统、Linux虚拟机</p><hr><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="1-基础环境"><a href="#1-基础环境" class="headerlink" title="1.基础环境"></a>1.基础环境</h2><p>在开始配置前，需要检查虚拟机主机名、hosts映射、关闭防火墙、免密登录、同步时间等操作</p><h3 id="（1）编辑主机名（三台机器）"><a href="#（1）编辑主机名（三台机器）" class="headerlink" title="（1）编辑主机名（三台机器）"></a>（1）编辑主机名（三台机器）</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看系统主机名(三台主机)</span>$ <span class="token function">cat</span> /etc/hostname<span class="token comment" spellcheck="true">#在三台主机上更改主机名</span><span class="token comment" spellcheck="true">#在 master 主节点</span>$ <span class="token keyword">echo</span> <span class="token string">"master"</span> <span class="token operator">></span>/etc/hostname <span class="token comment" spellcheck="true">#在 slave1 节点 </span>$ <span class="token keyword">echo</span> <span class="token string">"slave1"</span> <span class="token operator">></span>/etc/hostname <span class="token comment" spellcheck="true">#在 slave2 节点</span>$ <span class="token keyword">echo</span> <span class="token string">"slave2"</span> <span class="token operator">></span>/etc/hostname</code></pre><h3 id="（2）hosts映射"><a href="#（2）hosts映射" class="headerlink" title="（2）hosts映射"></a>（2）hosts映射</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看系统映射</span>$ <span class="token function">cat</span> /etc/hosts<span class="token comment" spellcheck="true">#编辑 /etc/hosts 文件</span>$ vim /etc/hosts<span class="token comment" spellcheck="true">#内容修改为 （三台主机内容一致）</span>127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.88.135 master 192.168.88.136 slave1 192.168.88.137 slave2</code></pre><h3 id="（3）关闭防火墙"><a href="#（3）关闭防火墙" class="headerlink" title="（3）关闭防火墙"></a>（3）关闭防火墙</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#关闭防火墙</span>$ systemctl stop firewalld.service<span class="token comment" spellcheck="true">#禁止防火墙开启自启</span>$ systemctl disable firewalld.service</code></pre><h3 id="（4）免密登录"><a href="#（4）免密登录" class="headerlink" title="（4）免密登录"></a>（4）免密登录</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#master 生成公钥私钥，四个回车即可</span>$ ssh-keygen<span class="token comment" spellcheck="true">#master 配置免密登录到master slave1 slave2三台主机</span>$ ssh-copy-id master $ ssh-copy-id slave1 $ ssh-copy-id slave2</code></pre><h3 id="（5）时间同步"><a href="#（5）时间同步" class="headerlink" title="（5）时间同步"></a>（5）时间同步</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装 ntp</span>$ yum <span class="token function">install</span> ntp -y <span class="token comment" spellcheck="true">#设置 ntp 开机自启动</span>$ systemctl <span class="token function">enable</span> ntpd <span class="token operator">&amp;&amp;</span> systemctl start ntpd<span class="token comment" spellcheck="true">#三台主机分别运行以下命令</span>$ ntpdate ntp4.aliyun.com</code></pre><hr><h2 id="2-JDK安装"><a href="#2-JDK安装" class="headerlink" title="2.JDK安装"></a>2.JDK安装</h2><h3 id="（1）下载安装包"><a href="#（1）下载安装包" class="headerlink" title="（1）下载安装包"></a>（1）下载安装包</h3><p>本文使用的 JDK 是1.8版本<br><a href="https://www.oracle.com/java/technologies/downloads/#java8">jdk1.8安装包下载</a><br><strong>注意：下载的是后缀为 .tar.gz 的包</strong></p><h3 id="（2）在主机-master-上安装-JDK"><a href="#（2）在主机-master-上安装-JDK" class="headerlink" title="（2）在主机 master 上安装 JDK"></a>（2）在主机 master 上安装 JDK</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#编译环境软件安装目录</span>$ <span class="token function">mkdir</span> -p /export/server<span class="token comment" spellcheck="true">#上传本地下载好的jdk-8u241-linux-x64.tar.gz到/export/server/目录下 并解压文件</span>$ <span class="token function">tar</span> -zxvf jdk-8u241-linux-x64.tar.gz<span class="token comment" spellcheck="true">#配置环境变量</span>$ vim /etc/profile<span class="token comment" spellcheck="true">#在文件内添加如下内容</span><span class="token comment" spellcheck="true"># jdk 环境变量 </span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/export/server/jdk1.8.0_241 <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$JAVA_HOME</span>/bin <span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.ja<span class="token comment" spellcheck="true">#重新加载环境变量文件</span>$ <span class="token function">source</span> /etc/profile<span class="token comment" spellcheck="true">#查看 java 版本号</span>$ java -version<span class="token comment" spellcheck="true">#出现 java version "1.8.0_241" 表示安装成功</span></code></pre><h3 id="（3）分发"><a href="#（3）分发" class="headerlink" title="（3）分发"></a>（3）分发</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#master 节点将 java 传输到 slave1 和 slave2</span>$ <span class="token function">cd</span> /export/server$ <span class="token function">scp</span> -r /export/server/jdk1.8.0_241/ root@slave1:/export/server/ $ <span class="token function">scp</span> -r /export/server/jdk1.8.0_241/ root@slave2:/export/server/<span class="token comment" spellcheck="true">#配置 slave1 和 slave2 的 jdk 环境变量（注：和上方 master 的配置方法一样）</span><span class="token comment" spellcheck="true">#配置完成后，在 master slave1 和slave2 三台主机创建软连接</span>$ <span class="token function">cd</span> /export/server $ <span class="token function">ln</span> -s jdk1.8.0_241/ jdk<span class="token comment" spellcheck="true">#重新加载环境变量文件</span>$ <span class="token function">source</span> /etc/profile</code></pre><hr><h2 id="3-Hadoop安装"><a href="#3-Hadoop安装" class="headerlink" title="3.Hadoop安装"></a>3.Hadoop安装</h2><h3 id="（1）下载安装包-1"><a href="#（1）下载安装包-1" class="headerlink" title="（1）下载安装包"></a>（1）下载安装包</h3><p>本文使用的 hadoop 是3.3.0版本<br><a href="http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz">hadoop3.3.0安装包下载</a><br><strong>注意：下载的是后缀为 .tar.gz的包</strong></p><h3 id="（2）在主机-master-上安装-hadoop"><a href="#（2）在主机-master-上安装-hadoop" class="headerlink" title="（2）在主机 master 上安装 hadoop"></a>（2）在主机 master 上安装 hadoop</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#上传本地下载好的 hadoop-3.3.0-Centos7-64-with-snappy.tar.gz 到 /export/server 并解压文件</span>$ <span class="token function">tar</span> -zxvf hadoop-3.3.0-Centos7-64-with-snappy.tar.gz<span class="token comment" spellcheck="true">#修改配置文件,进入到 hadoop 目录下</span>$ <span class="token function">cd</span> /export/server/hadoop-3.3.0/etc/hadoop<span class="token comment" spellcheck="true">#编辑 hadoop-env.sh 文件</span>$ vim hadoop-env.sh<span class="token comment" spellcheck="true">#文件最后添加 </span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/export/server/jdk1.8.0_241 <span class="token function">export</span> HDFS_NAMENODE_USER<span class="token operator">=</span>root <span class="token function">export</span> HDFS_DATANODE_USER<span class="token operator">=</span>root <span class="token function">export</span> HDFS_SECONDARYNAMENODE_USER<span class="token operator">=</span>root <span class="token function">export</span> YARN_RESOURCEMANAGER_USER<span class="token operator">=</span>root <span class="token function">export</span> YARN_NODEMANAGER_USER<span class="token operator">=</span>root<span class="token comment" spellcheck="true">#修改 core-site.xml 文件  </span>$ vim core-site.xml <span class="token comment" spellcheck="true">#添加如下内容</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置默认使用的文件系统 Hadoop支持file、HDFS、GFS、ali<span class="token operator">|</span>Amazon云等文件系统 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>fs.defaultFS<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>hdfs://node1:8020<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置Hadoop本地保存数据路径 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>hadoop.tmp.dir<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>/export/data/hadoop-3.3.0<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置HDFS web UI用户身份 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>hadoop.http.staticuser.user<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>root<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 整合hive 用户代理设置 --<span class="token operator">></span>hdfs-site.xmlmapred-site.xml<span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>hadoop.proxyuser.root.hosts<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>*<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>hadoop.proxyuser.root.groups<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>*<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 文件系统垃圾桶保存时间 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>fs.trash.interval<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>1440<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token comment" spellcheck="true">#修改 mapred-site.xml 文件</span>$ vim mapred-site.xml<span class="token comment" spellcheck="true">#添加如下内容</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置MR程序默认运行模式： yarn 集群模式 local本地模式 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>mapreduce.framework.name<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>yarn<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- MR程序历史服务地址 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>mapreduce.jobhistory.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>node1:10020<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- MR程序历史服务器web端地址 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>mapreduce.jobhistory.webapp.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>node1:19888<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.app.mapreduce.am.env<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>HADOOP_MAPRED_HOME<span class="token operator">=</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;HADOOP_HOME&amp;#125;&lt;/value></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>mapreduce.map.env<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>HADOOP_MAPRED_HOME<span class="token operator">=</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;HADOOP_HOME&amp;#125;&lt;/value></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>mapreduce.reduce.env<span class="token operator">&lt;</span>/name<span class="token operator">></span>yarn-site.xmlworkers<span class="token comment" spellcheck="true">#修改 hdfs-site.xml 文件</span>$ vim hdfs-site.xml<span class="token comment" spellcheck="true">#添加如下内容</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置SNN进程运行机器位置信息 --<span class="token operator">></span> <span class="token operator">&lt;</span>property<span class="token operator">></span>   <span class="token operator">&lt;</span>name<span class="token operator">></span>dfs.namenode.secondary.http-address<span class="token operator">&lt;</span>/name<span class="token operator">></span>   <span class="token operator">&lt;</span>value<span class="token operator">></span>slave1:9868<span class="token operator">&lt;</span>/value<span class="token operator">></span> <span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token comment" spellcheck="true">#修改 yarn-site.xml 文件</span>$ vim yarn-site.xml<span class="token comment" spellcheck="true">#添加如下内容</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置YARN集群主角色运行机器位置 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.hostname<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>node1<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.aux-services<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>mapreduce_shuffle<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 是否将对容器实施物理内存限制 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.pmem-check-enabled<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>false<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 是否将对容器实施虚拟内存限制。 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-check-enabled<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>false<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 开启日志聚集 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.log-aggregation-enable<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>true<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置yarn历史服务器地址 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.log.server.url<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>http://node1:19888/jobhistory/logs<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 历史日志保存的时间 7天 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.log-aggregation.retain-seconds<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>604800<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token comment" spellcheck="true">#修改 workers 文件</span>$ vim workers<span class="token comment" spellcheck="true">#将 workers 里的 localhost 删除，添加如下内容</span>master slave1 slave2</code></pre><h3 id="（3）分发-1"><a href="#（3）分发-1" class="headerlink" title="（3）分发"></a>（3）分发</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#master 节点将 hadoop 传输到 slave1 和 slave2</span>$ <span class="token function">cd</span> /export/server$ <span class="token function">scp</span> -r hadoop-3.3.0 root@node2:<span class="token variable">$PWD</span>$ <span class="token function">scp</span> -r hadoop-3.3.0 root@node3:<span class="token variable">$PWD</span><span class="token comment" spellcheck="true">#将 hadoop 添加到环境变量</span>vim /etc/profile<span class="token comment" spellcheck="true">#在文件内添加如下内容</span><span class="token comment" spellcheck="true"># hadoop 环境变量 </span><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/export/server/hadoop-3.3.0<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token comment" spellcheck="true">#配置 slave1 和 slave2 的 hadoop 环境变量（注：和上方 master 的配置方法一样）</span><span class="token comment" spellcheck="true">#配置完成后，在 master slave1 和slave2 三台主机创建软连接</span>$ <span class="token function">cd</span> /export/server $ <span class="token function">ln</span> -s hadoop-3.3.0/ hadoop<span class="token comment" spellcheck="true">#重新加载环境变量文件</span>$ <span class="token function">source</span> /etc/profile<span class="token comment" spellcheck="true">#在 master 主节点进行 Hadoop 集群启动 格式化 namenode（只有首次启动需要格式化）</span>$ hdfs namenode -format<span class="token comment" spellcheck="true">#等待初始化完成后，使用脚本一键起动</span>$ start-all.sh <span class="token comment" spellcheck="true">#起动后，输入jps查看进程号</span>$ jps<span class="token comment" spellcheck="true">#进程查看完毕后可进入到 WEB 界面</span><span class="token comment" spellcheck="true">#HDFS集群的界面网站是:http://master:9870/</span><span class="token comment" spellcheck="true">#YARN集群的界面网站是:http://master:9870/</span></code></pre><hr><h2 id="4-安装zookeeper"><a href="#4-安装zookeeper" class="headerlink" title="4.安装zookeeper"></a>4.安装zookeeper</h2><h3 id="（1）下载安装包-2"><a href="#（1）下载安装包-2" class="headerlink" title="（1）下载安装包"></a>（1）下载安装包</h3><p>本文使用的 zookeeper 是3.7.0版本<br><a href="https://zookeeper.apache.org/releases.html#download">zookeeper3.7.0安装包下载</a><br><strong>注意：下载的是后缀为 .tar.gz 的包,安装包需要3.7版本网上，否者后续spark配置会出现问题</strong></p><h3 id="（2）在主机-master-上安装-zookeeper"><a href="#（2）在主机-master-上安装-zookeeper" class="headerlink" title="（2）在主机 master 上安装 zookeeper"></a>（2）在主机 master 上安装 zookeeper</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#上传本地下载好的 apache-zookeeper-3.7.0-bin.tar.gz 到 /export/server 并解压文件</span>$ <span class="token function">tar</span> -zxvf apache-zookeeper-3.7.0-bin.tar.gz<span class="token comment" spellcheck="true">#修改配置文件,进入到 /export/server 目录下</span>$ <span class="token function">cd</span> /export/server/<span class="token comment" spellcheck="true">#在 /export/server 目录下创建 zookeeper 软连接</span>$ <span class="token function">ln</span> -s apache-zookeeper-3.7.0-bin/ zookeeper<span class="token comment" spellcheck="true">#进入到 zookeeper 目录下</span>$ <span class="token function">cd</span> zookeeper<span class="token comment" spellcheck="true">#进入到 zookeeper 下的 conf 文件内</span>$ <span class="token function">cd</span> /export/server/zookeeper/conf/ <span class="token comment" spellcheck="true">#将 zoo_sample.cfg 文件复制为新文件 zoo.cfg</span>$ <span class="token function">cp</span> zoo_sample.cfg zoo.cfg<span class="token comment" spellcheck="true">#在 zoo.cfg 文件内添加如下内容</span><span class="token comment" spellcheck="true">#Zookeeper的数据存放目录</span>dataDir<span class="token operator">=</span>/export/server/zookeeper/zkdatas<span class="token comment" spellcheck="true"># 保留多少个快照</span>autopurge.snapRetainCount<span class="token operator">=</span>3<span class="token comment" spellcheck="true"># 日志多少小时清理一次</span>autopurge.purgeInterval<span class="token operator">=</span>1<span class="token comment" spellcheck="true"># 集群中服务器地址</span>server.1<span class="token operator">=</span>master:2888:3888 server.2<span class="token operator">=</span>slave1:2888:3888 server.3<span class="token operator">=</span>slave2:2888:3888<span class="token comment" spellcheck="true">#进入 /export/server/zookeeper/zkdatas 目录在此目录下创建 myid 文件,将 1 写入进去</span>$ <span class="token function">cd</span> /export/server/zookeeper/zkdata$ <span class="token function">mkdir</span> myid$ <span class="token keyword">echo</span> <span class="token string">'1'</span> <span class="token operator">></span> myid<span class="token comment" spellcheck="true">#查看是否成功写入</span>$ vim myid<span class="token comment" spellcheck="true">#出现数字1即为成功</span></code></pre><h3 id="（3）分发-2"><a href="#（3）分发-2" class="headerlink" title="（3）分发"></a>（3）分发</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#master 节点将 zookeeper 传输到 slave1 和 slave2</span>$ <span class="token function">cd</span> /export/server$ <span class="token function">scp</span> -r /export/server/zookeeper/ slave1:<span class="token variable">$PWD</span>$ <span class="token function">scp</span> -r /export/server/zookeeper/ slave2:<span class="token variable">$PWD</span><span class="token comment" spellcheck="true">#推送完成后将 slave1 和 slave2 的 /export/server/zookeeper/zkdatas/ 文件夹下的 myid中的内容分别改为 2 和 3</span><span class="token comment" spellcheck="true">#在 slave1 节点上</span>$ <span class="token function">cd</span> /export/server/zookeeper/zkdatas/$ <span class="token keyword">echo</span> <span class="token string">'2'</span> <span class="token operator">></span> myid<span class="token comment" spellcheck="true">#查看是否成功写入</span>$ vim myid<span class="token comment" spellcheck="true">#出现数字2即为成功</span><span class="token comment" spellcheck="true">#在 slave2 节点上</span>$ <span class="token function">cd</span> /export/server/zookeeper/zkdatas/$ <span class="token keyword">echo</span> <span class="token string">'3'</span> <span class="token operator">></span> myid<span class="token comment" spellcheck="true">#查看是否成功写入</span>$ vim myid<span class="token comment" spellcheck="true">#出现数字3即为成功</span><span class="token comment" spellcheck="true">#将 zookeeper 添加到环境变量</span>vim /etc/profile<span class="token comment" spellcheck="true">#在文件内添加如下内容</span><span class="token comment" spellcheck="true"># zookeeper 环境变量 </span><span class="token function">export</span> ZOOKEEPER_HOME<span class="token operator">=</span>/export/server/zookeeper <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin<span class="token comment" spellcheck="true">#配置 slave1 和 slave2 的 hadoop 环境变量（注：和上方 master 的配置方法一样）</span><span class="token comment" spellcheck="true">#重新加载环境变量文件</span>$ <span class="token function">source</span> /etc/profile<span class="token comment" spellcheck="true">#三台机器分别进入 /export/server/zookeeper/bin 目录下启动 zkServer.sh 脚本</span>$ <span class="token function">cd</span> /export/server/zookeeper/bin$ zkServer.sh start<span class="token comment" spellcheck="true">#查看 zookeeper 的状态</span>$ zkServer.sh status<span class="token comment" spellcheck="true">#也可以通过jps查看zookeeper的进程</span>$ jps</code></pre><h2 id="以上-就是Spark基础环境的配置-接下来会带来-Spark-local-amp-stand-alone配置"><a href="#以上-就是Spark基础环境的配置-接下来会带来-Spark-local-amp-stand-alone配置" class="headerlink" title="以上,就是Spark基础环境的配置,接下来会带来 Spark local&amp; stand-alone配置"></a>以上,就是Spark基础环境的配置,接下来会带来 Spark local&amp; stand-alone配置</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文主&lt;/p&gt;
&lt;p&gt;本文主要使用Hexo与Github进行个人blog的搭建&lt;br&gt;Hexo官网：&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt;&lt;br&gt;Github官网：&lt;a href=&quot;https://github.com/&quot;&gt;Git</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark local &amp; stand-alone配置-中文文档</title>
    <link href="http://example.com/2022/05/17/Spark%20local&amp;%20stand-alone%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/05/17/Spark%20local&amp;%20stand-alone%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-17T03:04:54.670Z</published>
    <updated>2022-05-17T03:07:33.281Z</updated>
    
    <content type="html"><![CDATA[<p>Spark提供多种运行模式，包括Spark local 模式(单机)、Spark alone 模式(集群)、 hadoop YARN 模式(集群)和 Kubernetes 模式(容器集群) </p><ul><li>Spark local 模式:以一个独立的进程,通过其内部的多个线程来模拟整个Spark运行时环境来开发和测试</li><li>Spark alone 模式:各个角色以独立进程的形式存在,并组成Spark集群环境,运行在linux系统之上</li><li>hadoop YARN 模式:Spark中的各个角色运行在YARN的容器内部,并组成Spark集群环境,运行在yarn容器内</li><li>Spark中的各个角色运行在Kubernetes的容器内部,并组成Spark集群环境</li></ul><hr><p>本文着重描述 Spark local 模式和 Spark alone 模式</p><h2 id="Spark-local模式"><a href="#Spark-local模式" class="headerlink" title="Spark local模式"></a>Spark local模式</h2><p><strong>Spark local 模式是以一个独立的进程，通过其内部的多个线程来模拟整个Spark运行时的环境</strong><br>Spark由四类角色组成整个Spark的运行环境:</p><ul><li>Master角色，管理整个集群的资源</li><li>Worker角色，管理单个服务器的资源</li><li>Driver角色，管理单个Spark任务在运行的时候的工作</li><li>Executor角色，单个任务运行的时候的工作者</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>注意：以下操作需要完成 Spark 基础环境配置。具体配置移步到<a href="../../16/Spark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">Spark基础环境配置</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spark提供多种运行模式，包括Spark local 模式(单机)、Spark alone 模式(集群)、 hadoop YARN 模式(集群)和 Kubernetes 模式(容器集群) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark local 模式:以一个独立的进程,通过其内</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
</feed>
